source("C:/Users/jiw360/Dropbox/Git-rep/SAT/R/MinMaxP.R")
p <- 1*10^5; ## total number of pairs
d1 = 1000; d2 = 1000; d3 = 100;
X <- c(rep(0,p-(d1 + d2 + d3)),rep(1,d1),rep(2,d2),rep(3,d3));
mu.1 = rep(0, p); mu.2 = rep(0, p);
mu.1[X==1|X==3] = 4; mu.2[X==2|X==3] = 5;
Z1 <- mu.1 + rnorm(p,0,1);
Z2 <- mu.2 + rnorm(p,0,1);
T1 = abs(Z1);T2 = abs(Z2);
P1 = 2* (1 - pnorm( T1)); P2 = 2* (1 - pnorm(T2));
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
MinMaxP.detect(P.min = P.min, P.max = P.max, M)
#--------- decide the range of the cut-off  ---------
# step 1: grid search to determine the initial interval to aovid unnecessary computatation
d = length(P.min)
M = min(P.max)
M.choice.0 = sort(exp( log(M) * c(1:10) * 0.1 ))
C_0_m = Cmax_null(t = M, P.min = P.min)
if(method == "FDR"){ # fdr_value
citeria_fun = function(x){ Fmax_null(t = x, P.min = P.min)/(1/d+mean(P.max < x))  }
}
if(method == "FWER"){ #fwer_value
citeria_fun = function(x){ Cmax_null(t = x, P.min = P.min) * sum(P.min < x)  }
}
method = "FWER"
citeria_value = sapply(M.choice.0, citeria_fun)
if(method == "FDR"){ # fdr_value
citeria_fun = function(x){ Fmax_null(t = x, P.min = P.min)/(1/d+mean(P.max < x))  }
}
if(method == "FWER"){ #fwer_value
citeria_fun = function(x){ Cmax_null(t = x, P.min = P.min) * sum(P.min < x)  }
}
citeria_value = sapply(M.choice.0, citeria_fun)
citeria_value
method
method = "FDR"
# step 2:choose Pmax based on the fdr_init
k = which(citeria_value > alpha)
alpha = 0.05
if(method == "FDR"){ # fdr_value
citeria_fun = function(x){ Fmax_null(t = x, P.min = P.min)/(1/d+mean(P.max < x))  }
}
citeria_value = sapply(M.choice.0, citeria_fun)
# step 2:choose Pmax based on the fdr_init
k = which(citeria_value > alpha)
M.lower = M.choice.0[k]
M.upper = max(P.max[P.max <= M.choice.0[k-1]] )
k
# step 2:choose Pmax based on the fdr_init
k = which.min(citeria_value > alpha)
M.lower = M.choice.0[k]
M.upper = max(P.max[P.max <= M.choice.0[k-1]] )
k
# step 2:choose Pmax based on the fdr_init
k = min(which(citeria_value > alpha))
M.lower = M.choice.0[k]
M.upper = max(P.max[P.max <= M.choice.0[k-1]] )
k
M.choice = unique(P.max[P.max < M.lower])
M.choice = sort(M.choice[M.choice >= M.upper ]) # now we had a smaller set of M.choice
# step 3: elaborate the choice
#P.min = P.min[P.min < max(M.choice) ]
pv = sapply(M.choice, citeria_fun)
pv
tau = max( M.choice[pv <= alpha])
tau
MinMaxP.discov(P.max, P.min, method = "FWER", alpha = 0.05)
MinMaxP.discov= function(P.max, P.min, method = c("FWER", "FDR"), alpha = 0.05){
#--------- decide the range of the cut-off  ---------
# step 1: grid search to determine the initial interval to aovid unnecessary computatation
d = length(P.min)
M = min(P.max)
M.choice.0 = sort(exp( log(M) * c(1:10) * 0.1 ))
C_0_m = Cmax_null(t = M, P.min = P.min)
if(method == "FDR"){ # fdr_value
citeria_fun = function(x){ Fmax_null(t = x, P.min = P.min)/(1/d+mean(P.max < x))  }
}
if(method == "FWER"){ #fwer_value
citeria_fun = function(x){ Cmax_null(t = x, P.min = P.min) * sum(P.min < x)  }
}
citeria_value = sapply(M.choice.0, citeria_fun)
#fdr_init = sapply(M.choice.0, function(x){ Fmax_null(t = x, P.min = P.min)/(1/d+mean(P.max < x))  } )
#fwer_init = sapply(M.choice.0, function(x){ Cmax_null(t = x, P.min = P.min) * sum(P.min < x)  } )
#citeria_fun = fwer_init
# step 2:choose Pmax based on the fdr_init
k = min(which(citeria_value > alpha))
M.lower = M.choice.0[k]
M.upper = max(P.max[P.max <= M.choice.0[k-1]] )
M.choice = unique(P.max[P.max < M.lower])
M.choice = sort(M.choice[M.choice >= M.upper ]) # now we had a smaller set of M.choice
# step 3: elaborate the choice
#P.min = P.min[P.min < max(M.choice) ]
pv = sapply(M.choice, citeria_fun)
tau = max( M.choice[pv <= alpha])
}
MinMaxP.discov(P.max, P.min, method = "FWER", alpha = 0.05)
MinMaxP.discov= function(P.max, P.min, method = c("FWER", "FDR"), alpha = 0.05){
#--------- decide the range of the cut-off  ---------
# step 1: grid search to determine the initial interval to aovid unnecessary computatation
d = length(P.min)
M = min(P.max)
M.choice.0 = sort(exp( log(M) * c(1:10) * 0.1 ))
C_0_m = Cmax_null(t = M, P.min = P.min)
if(method == "FDR"){ # fdr_value
citeria_fun = function(x){ Fmax_null(t = x, P.min = P.min)/(1/d+mean(P.max < x))  }
}
if(method == "FWER"){ #fwer_value
citeria_fun = function(x){ Cmax_null(t = x, P.min = P.min) * sum(P.min < x)  }
}
citeria_value = sapply(M.choice.0, citeria_fun)
#fdr_init = sapply(M.choice.0, function(x){ Fmax_null(t = x, P.min = P.min)/(1/d+mean(P.max < x))  } )
#fwer_init = sapply(M.choice.0, function(x){ Cmax_null(t = x, P.min = P.min) * sum(P.min < x)  } )
#citeria_fun = fwer_init
# step 2:choose Pmax based on the fdr_init
k = min(which(citeria_value > alpha))
M.lower = M.choice.0[k]
M.upper = max(P.max[P.max <= M.choice.0[k-1]] )
M.choice = unique(P.max[P.max < M.lower])
M.choice = sort(M.choice[M.choice >= M.upper ]) # now we had a smaller set of M.choice
# step 3: elaborate the choice
#P.min = P.min[P.min < max(M.choice) ]
pv = sapply(M.choice, citeria_fun)
tau = max( M.choice[pv <= alpha])
S = which(P.max <= tau)
return(list(S = S, tau = tau))
}
MinMaxP.discov(P.max, P.min, method = "FWER", alpha = 0.05)
MinMaxP.discov(P.max, P.min, method = "FDR", alpha = 0.05)
