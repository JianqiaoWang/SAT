source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
library(ssa)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
FDR = function(T1, T2, alpha, CF){
vec = vector()
T.min = pmin(T1, T2)
T.max = pmax(T1, T2)
G = function(t) mean( T.min > t )
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
t.choice = orde
FDR.t =  S(t.choice)/G(t.choice)
# Take t as the first such that FDR.t < alpha
index = (which(FDR.t > alpha))[1]
t.thresh = index[1]
rejected.test = which(T.min > t.thresh)
return(rejected.test)
}
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(s,6,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(s,5,1);
T1 = abs(Z1)
T2 = abs(Z2)
vec = vector()
T.min = pmin(T1, T2)
T.max = pmax(T1, T2)
G = function(t) mean( T.min > t )
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
ssa::nfsdr2()
ssa::nfsdr2
ssa::nfsdr
t.choice = sort(unique(T.min), decreasing = TRUE)[1:2000]
FDR.t =  S(t.choice)/G(t.choice)
CF = function(x){ 2*pnorm(x) -1}
CF = function(x){ 2*pnorm(x) -1}
FDR.t =  S(t.choice)/G(t.choice)
t.choice
f <- function(x = 1:3, y) c(x, y)
vf <- Vectorize(f, SIMPLIFY = FALSE)
f(1:3, 1:3)
vf(1:3, 1:3)
vf(y = 1:3) # Only vectorizes y, not x
G <- Vectorize(G, SIMPLIFY = FALSE)
S <- Vectorize(S, SIMPLIFY = T)
G <- Vectorize(G, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:2000]
FDR.t =  S(t.choice)/G(t.choice)
S(t.choice)
G(t.choice)
G <- Vectorize(G, SIMPLIFY = T)
G <- Vectorize(G, SIMPLIFY = T)
View(G)
FDR.t =  S(t.choice)/G(t.choice)
G(t.choice)
G = function(t) {mean( T.min > t )}
G <- Vectorize(G, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:200]
G(t.choice)
FDR.t =  S(t.choice)/ (G(t.choice) + 1/length(T.max))
# Take t as the first such that FDR.t < alpha
index = (which(FDR.t > alpha))[1]
alpha = 0.05
X <- c(rep(0,p-3*s),rep(1,2*s),rep(2,0.5*s),rep(3,0.5*s));
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(s,6,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(s,5,1);
ssa::nfsdr
CF = function(x){ 2*pnorm(x) -1}
FDR = function(T1, T2, alpha, CF){
vec = vector()
T.min = pmin(T1, T2)
T.max = pmax(T1, T2)
G = function(t) {mean( T.min > t )}
G <- Vectorize(G, SIMPLIFY = T)
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S <- Vectorize(S, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:200]
FDR.t =  S(t.choice)/ (G(t.choice) + 1/length(T.max))
# Take t as the first such that FDR.t < alpha
if(sum( FDR.t <= alpha ) > 0){
t_opt = min(t.choice[FDR.t <= alpha])
rejected.test = which(T.min > t_opt)
}else{
return(0)
}
}
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(s,3,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(s,4,1);
T1 = abs(Z1)
T2 = abs(Z2)
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(s,3,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(s,4,1);
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(2*s,3,1);
sum(X==1|X==3)
s
X <- c(rep(0,p-3*s),rep(1,s),rep(2,s),rep(3,s));
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(2*s,3,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(2*s,4,1);
T1 = abs(Z1)
T2 = abs(Z2)
reject =  FDR(T1, T2, 0.05, CF)
reject
reject2 = ssa::nfsdr2_all(T1, T2)
reject2 = ssa::nfsdr2_all(T1, T2, alpha = 0.05)
View(reject2)
??ssa::nfsdr2_all
??SSa
library(ssa)
reject2 = ssa::nfsdr(T1, T2, alpha = 0.05)
reject2 = ssa::nfsdr(cbind(T1, T2), alpha = 0.05)
reject2
vec = vector()
T.min = pmin(T1, T2)
T.max = pmax(T1, T2)
G = function(t) {mean( T.min > t )}
G <- Vectorize(G, SIMPLIFY = T)
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S <- Vectorize(S, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:200]
FDR.t =  S(t.choice)/ (G(t.choice) + 1/length(T.max))
FDR.t
FDR.t =  S(t.choice)/ (G(t.choice) )
FDR.t
FDR.t =  S(t.choice)/ (G(t.choice) + 0.1/length(T.max))
# Take t as the first such that FDR.t < alpha
if(sum( FDR.t <= alpha ) > 0){
t_opt = min(t.choice[FDR.t <= alpha])
rejected.test = which(T.min > t_opt)
}else{
return(0)
}
FDR = function(T1, T2, alpha, CF){
vec = vector()
T.min = pmin(T1, T2)
T.max = pmax(T1, T2)
G = function(t) {mean( T.min > t )}
G <- Vectorize(G, SIMPLIFY = T)
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S <- Vectorize(S, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:200]
FDR.t =  S(t.choice)/ (G(t.choice) + 0.1/length(T.max))
# Take t as the first such that FDR.t < alpha
if(sum( FDR.t <= alpha ) > 0){
t_opt = min(t.choice[FDR.t <= alpha])
rejected.test = which(T.min > t_opt)
}else{
return(0)
}
}
s
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(2*s,3,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(2*s,4,1);
T1 = abs(Z1)
T2 = abs(Z2)
reject =  FDR(T1, T2, 0.05, CF)
reject2 = ssa::nfsdr(cbind(T1, T2), alpha = 0.05)
#set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(2*s,5,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(2*s,6,1);
T1 = abs(Z1)
T2 = abs(Z2)
reject =  FDR(T1, T2, 0.05, CF)
reject2 = ssa::nfsdr(cbind(T1, T2), alpha = 0.05)
mean(reject %in% (10^6 - 100):10^6 )
mean(reject2 %in% (10^6 - 100):10^6 )
mean(reject %in% (p - s):p )
mean(reject2 %in% (p - s):p )
1 - mean(reject %in% (p - s):p )
1 - mean(reject2 %in% (p - s):p )
for(i in 1:200){
set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(2*s,4,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(2*s,5,1);
T1 = abs(Z1)
T2 = abs(Z2)
reject =  FDR(T1, T2, 0.05, CF)
reject2 = ssa::nfsdr(cbind(T1, T2), alpha = 0.05)
1 - mean(reject %in% (p - s):p );
sum(reject %in% (p - s):p)
1 - mean(reject2 %in% (p - s):p )
sum(reject2 %in% (p - s):p)
#reject2 = ssa::nfsdr2_all(T1, T2, alpha = 0.05)
}
for(i in 1:200){
set.seed(i);
Z1 <- rnorm(p,0,1); Z1[X==1|X==3] <- rnorm(2*s,4,1);
Z2 <- rnorm(p,0,1); Z2[X==2|X==3] <- rnorm(2*s,5,1);
T1 = abs(Z1)
T2 = abs(Z2)
reject =  FDR(T1, T2, 0.05, CF)
reject2 = ssa::nfsdr(cbind(T1, T2), alpha = 0.05)
result = c( 1 - mean(reject %in% (p - s):p ),
sum(reject %in% (p - s):p),
1 - mean(reject2 %in% (p - s):p ),
sum(reject2 %in% (p - s):p)
)
print(result)
#reject2 = ssa::nfsdr2_all(T1, T2, alpha = 0.05)
}
1*10^5
100000
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
reject =  FDR(T1, T2, 0.05, CF)
reject
reject2
ssa::nfsdr
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
vec = vector()
T.min = pmin(T1, T2)
T.max = pmax(T1, T2)
G = function(t) {mean( T.min > t )}
G <- Vectorize(G, SIMPLIFY = T)
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S <- Vectorize(S, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:200]
FDR.t =  S(t.choice)/ max(G(t.choice) , 1/length(T.max))
FDR.t
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S(4)
S(3)
S(2)
(1 - CF(t))^2
(1 - CF(2))^2
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S <- Vectorize(S, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:200]
FDR.t =  S(t.choice)/ max(G(t.choice) , 1/length(T.max))
# Take t as the first such that FDR.t < alpha
if(sum( FDR.t <= alpha ) > 0){
t_opt = min(t.choice[FDR.t <= alpha])
rejected.test = which(T.min > t_opt)
}else{
return(0)
}
t_opt
rejected.test
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
reject =  FDR(T1, T2, 0.05, CF)
reject2 = ssa::nfsdr(cbind(T1, T2), alpha = 0.05, rescale = F)
result = c( 1 - mean(reject %in% (p - s):p ),
sum(reject %in% (p - s):p),
1 - mean(reject2 %in% (p - s):p ),
sum(reject2 %in% (p - s):p)
)
print(result)
reject
reject2
T.min = pmin(T1, T2)
T.max = pmax(T1, T2)
G = function(t) {mean( T.min > t )}
G <- Vectorize(G, SIMPLIFY = T)
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S <- Vectorize(S, SIMPLIFY = T)
t.choice = sort(unique(T.min), decreasing = TRUE)[1:200]
FDR.t =  S(t.choice)/ max(G(t.choice) , 1/length(T.max))
FDR.t
CF(t)
FDR.t =  S(t.choice)/ max(G(t.choice) , 1/length(T.max))
# Take t as the first such that FDR.t < alpha
if(sum( FDR.t <= alpha ) > 0){
t_opt = min(t.choice[FDR.t <= alpha])
rejected.test = which(T.min > t_opt)
}else{
return(0)
}
t_opt
1 - CF2.78t)
1 - CF(2.78)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
S = function(t) mean( (T.max > t) * (1 - CF(t))  )
S(2.778)
(1 - CF(2.778))^2
ssa::nfsdr
mean(T1 > 2.778) * mean( T2 * 2.778)
mean(T1 > 2.778) * mean( T2 > 2.778)
S(2.778)
ssa::nfsdr
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
ssa::nfsdr
debugSource('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
R
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
debugSource('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
debugSource('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
debugSource('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
t_opt
t.choice
FDR.t
t.choice
debugSource('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
t_opt
R = T >= t_opt
S = colSums(R)/n
S
G = sum(rowSums(R) == D)/n
allprods = apply(allpairs, 2, function(x) {
prod(S[x])
})
allprods
G
t = 2.993
G(2.993)
S(2.993)
mean( (T1 > t))
mean( (T2 > t))
mean( (T1 > t)) * mean( (T2 > t))
G
G(2.993)
9.499/0.00019
debugSource('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
ssa::nfsdr
source('~/Desktop/Permu-Simu-Signal/FDR.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/perm-p-value.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/MaxDetect.R', echo=TRUE)
ssa::maxtest
source('~/Desktop/Permu-Simu-Signal/MaxDetect.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/MaxDetect.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
i
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
MaxDetect(T1, T2)$p
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/MaxDetect.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
warnings()
debugSource('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
debugSource('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
debugSource('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/MaxDetect.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation.R', echo=TRUE)
runif(2, c(-1, 0), c( 0 ,1)  )
P1 = 2* (1 - pnorm( T1)); P2 = 2* (1 - pnorm(T2))
hist(P1)
hist(P2)
hist(T1)
# the input is p-value sequence
vec = vector()
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
n= length(P.min)
Tstat = min(P.max)
# conditional on the P.min, the distribution of P.max is
for(i in 1:K){
Z.max = runif(n,P.min,rep(1, n) )
vec = c(vec, min(Z.max) )
}
K = 200
# conditional on the P.min, the distribution of P.max is
for(i in 1:K){
Z.max = runif(n,P.min,rep(1, n) )
vec = c(vec, min(Z.max) )
}
hist(vec)
MaxDetect2 = function(P1, P2, K = 200){
# the input is p-value sequence
vec = vector()
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
n= length(P.min)
Tstat = min(P.max)
# conditional on the P.min, the distribution of P.max is given by
for(i in 1:K){
Z.max = runif(n,P.min,rep(1, n) )
vec = c(vec, min(Z.max) )
}
p.value = sum(vec <= Tstat)/length(vec)
return(list(M = Tstat, p = p.value))
}
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
View(p.vec)
print(mean(p.vec <= 0.05));
print(mean(p.vec.2 <= 0.05));
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
source('~/Desktop/Permu-Simu-Signal/DetectSimulation2.R', echo=TRUE)
print(mean(p.vec <= 0.05));
print(mean(p.vec.2 <= 0.05));
print(mean(p.vec.3 <= 0.05));
source('~/Desktop/SAT/R/MaxID.R', echo=TRUE)
usethis::create_package()
usethis::create_package(path = ./)
usethis::create_package(path = "./")
usethis::create_package(path = "../SAT")
setwd("..")
usethis::create_package(path = "SAT")
here::dr_here()
install.packages("here")
install.packages("here")
here::dr_here()
usethis::create_package(path = "SAT")
cd SAT
setwd("P://SAT/SimuCode/IndZ")
source('P://SAT/SimuCode/IndZ/Identification.R', echo=TRUE)
source('P://SAT/SimuCode/IndZ/Identification.R', echo=TRUE)
source('P://SAT/SimuCode/IndZ/Identification.R', echo=TRUE)
source('P://SAT/SimuCode/IndZ/Identification.R', echo=TRUE)
View(res)
S.Reject
SAT::MinID(P1, P2, type = "FWER", alpha = 0.05)
SAT::MinDetect(P1, P2)
