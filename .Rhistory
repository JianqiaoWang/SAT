A.1 = sum((1 - F_min.est) /F_min.est)
A.2 = -log(1 - M) - (M - M^2/2)/(1 - M)^2
A.3 = sum(log(1 - P.min.target))
A = A.1*A.2 - A.3
return( exp(-A) )
}
pvec = c(pvec, MinDetect.adj(pvalue.1, pvalue.2)$p)
}
pvec
pheno.1 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[1:7000] ,  M = 300)
pheno.2 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[8000:16000], M = 300)
sumstat.1 = big_univLinReg(X = G, y = pheno.1$pheno)
sumstat.2 = big_univLinReg(X = G, y = pheno.2$pheno)
P1 = 2*( 1 - pnorm(abs(sumstat.1$score)))
P2 = 2*( 1 - pnorm(abs(sumstat.2$score)))
library(SAT)
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
pr.approx = (1-M)/(1-P.min.target)
target.loci
corr <- snp_cor(G, ind.col = target.loci)
View(corr)
res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
View(res)
View(corr)
poolr
library(poolr)
View(res)
devtools::load_all('../../SAT/')
corr <- snp_cor(G, ind.col = target.loci) %>% as.matrix()
evs = eigen(corr, only.values = T)$values
evs.tr =eigen(corr1, only.values = T)$values
n.eff.1 =  SAT::meff(eigen = evs, method = "nyholt")
n.eff.2 = SAT::meff(eigen = evs, method = "liji")
n.eff.3 = SAT::meff(eigen = evs, method = "gao")
n.eff.4 = SAT::meff(eigen = evs, method = "galwey")
corr1 =  poolr::mvnconv(corr, target = "p", cov2cor = TRUE)
pr.approx = (1-M)/(1-P.min.target)
corr <- snp_cor(G, ind.col = target.loci) %>% as.matrix()
evs = eigen(corr, only.values = T)$values
#n.eff.1 =  SAT::meff(eigen = evs, method = "nyholt")
n.eff.2 = SAT::meff(eigen = evs, method = "liji")
n.eff.3 = SAT::meff(eigen = evs, method = "gao")
n.eff.4 = SAT::meff(eigen = evs, method = "galwey")
n.eff = c(n.eff.2, n.eff.3, n.eff.4)
n.all = length(target.loci)
#res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
pv = 1 - (prod(pr.approx) * Adj.func(P1, P2))^(n.eff/n.all)
pv
Adj.func(P1, P2)
prod(pr.approx)
library(bigsnpr)
#bigsnpr::snp_readBed2(bedfile = "../../Cric_HF_RealData/rawdata/cric.filtered.maf0.01.bed",
#                      backingfile = "cric_geno",
#                      ind.col	= 1:500000)
# geno <- snp_attach(rds)
# G <- geno$genotypes
# CHR <- geno$map$chromosome
# infos <- snp_fastImputeSimple(G, method = "mean2")
# # To make this permanent, you need to save (modify) the file on disk
# geno$genotypes <- infos
# geno <- snp_save(geno)
rds = "P:\\SAT-paper\\SimuCode\\GenoSimu\\cric_geno.rds"
test <- snp_attach(rds) ; G <- test$genotypes
#ind.keep <- snp_clumping(G, infos.chr = test$map$chromosome,
#                         infos.pos = test$map$physical.pos,
#                         thr.r2 = 0.05)
#saveRDS(ind.keep, file ="ind_keep_clump.rds")
ind.keep = readRDS(file ="ind_keep_clump.rds")
pvec = vector()
for(i in 1: 10){
pheno.1 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[1:7000] ,  M = 300)
pheno.2 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[8000:16000], M = 300)
sumstat.1 = big_univLinReg(X = G, y = pheno.1$pheno)
sumstat.2 = big_univLinReg(X = G, y = pheno.2$pheno)
P1 = 2*( 1 - pnorm(abs(sumstat.1$score)))
P2 = 2*( 1 - pnorm(abs(sumstat.2$score)))
#####################---------------------
#####################---------------------
#####################---------------------
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
pr.approx = (1-M)/(1-P.min.target)
corr <- snp_cor(G, ind.col = target.loci) %>% as.matrix()
evs = eigen(corr, only.values = T)$values
#n.eff.1 =  SAT::meff(eigen = evs, method = "nyholt")
n.eff.2 = SAT::meff(eigen = evs, method = "liji")
n.eff.3 = SAT::meff(eigen = evs, method = "gao")
n.eff.4 = SAT::meff(eigen = evs, method = "galwey")
n.eff = c(n.eff.2, n.eff.3, n.eff.4)
n.all = length(target.loci)
#res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
pv = 1 - (prod(pr.approx) * Adj.func(P1, P2))^(n.eff/n.all)
#####################----------------------
#####################----------------------
#####################----------------------
#library(SAT)
#MinDetect.adj = function(P1, P2){
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
pr.approx = (1-M)/(1-P.min.target)
Adj = Adj.func(P1, P2)
p.value = 1 - prod(pr.approx)* Adj
return(list(M = M, p = p.value))
}
pvec = vector()
for(i in 1: 10){
pheno.1 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[1:7000] ,  M = 300)
pheno.2 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[8000:16000], M = 300)
sumstat.1 = big_univLinReg(X = G, y = pheno.1$pheno)
sumstat.2 = big_univLinReg(X = G, y = pheno.2$pheno)
P1 = 2*( 1 - pnorm(abs(sumstat.1$score)))
P2 = 2*( 1 - pnorm(abs(sumstat.2$score)))
#####################---------------------
#####################---------------------
#####################---------------------
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
pr.approx = (1-M)/(1-P.min.target)
corr <- snp_cor(G, ind.col = target.loci) %>% as.matrix()
evs = eigen(corr, only.values = T)$values
#n.eff.1 =  SAT::meff(eigen = evs, method = "nyholt")
n.eff.2 = SAT::meff(eigen = evs, method = "liji")
n.eff.3 = SAT::meff(eigen = evs, method = "gao")
n.eff.4 = SAT::meff(eigen = evs, method = "galwey")
n.eff = c(n.eff.2, n.eff.3, n.eff.4)
n.all = length(target.loci)
#res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
pv = 1 - (prod(pr.approx) * Adj.func(P1, P2))^(n.eff/n.all)
#####################----------------------
#####################----------------------
#####################----------------------
#library(SAT)
# MinDetect.adj = function(P1, P2){
#   P.min = pmin(P1, P2)
#   P.max = pmax(P1, P2)
#   M = min(P.max)
#   target.loci = which(P.min <= M)
#   P.min.target =  P.min[target.loci]
#   pr.approx = (1-M)/(1-P.min.target)
#   Adj = Adj.func(P1, P2)
#   p.value = 1 - prod(pr.approx)* Adj
#   return(list(M = M, p = p.value))
# }
# Adj.func = function(P1, P2){
#   P.min = pmin(P1, P2)
#   P.max = pmax(P1, P2)
#   M = min(P.max)
#   target.loci = which(P.min <= M)
#   P.min.target =  P.min[target.loci]
#   #I.1 = which(mu != 0)
#   #I.0 = which(mu == 0)
#
#   pr.approx = (1-M)/(1-P.min.target)
#   #F_min = pp.to.z(mu = mu, px =M) + M - M*(pp.to.z(mu = mu, px =M))
#   F_min.est = rep(mean(P.min < M), length(P.min.target))
#   #A.1 = sum((1 - F_min) /F_min)
#   A.1 = sum((1 - F_min.est) /F_min.est)
#   A.2 = -log(1 - M) - (M - M^2/2)/(1 - M)^2
#   A.3 = sum(log(1 - P.min.target))
#
#   A = A.1*A.2 - A.3
#
#   return( exp(-A) )
#
# }
pvec = rbind(pvec, pv)
print(pv)
}
warnings()
for(i in 1: 100){
pheno.1 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[1:7000] ,  M = 300)
pheno.2 = snp_simuPheno(G, h2 = 0.5, ind.possible = ind.keep[8000:16000], M = 300)
sumstat.1 = big_univLinReg(X = G, y = pheno.1$pheno)
sumstat.2 = big_univLinReg(X = G, y = pheno.2$pheno)
P1 = 2*( 1 - pnorm(abs(sumstat.1$score)))
P2 = 2*( 1 - pnorm(abs(sumstat.2$score)))
#####################---------------------
#####################---------------------
#####################---------------------
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
pr.approx = (1-M)/(1-P.min.target)
corr <- snp_cor(G, ind.col = target.loci) %>% as.matrix()
evs = eigen(corr, only.values = T)$values
#n.eff.1 =  SAT::meff(eigen = evs, method = "nyholt")
n.eff.2 = SAT::meff(eigen = evs, method = "liji")
n.eff.3 = SAT::meff(eigen = evs, method = "gao")
n.eff.4 = SAT::meff(eigen = evs, method = "galwey")
n.eff = c(n.eff.2, n.eff.3, n.eff.4)
n.all = length(target.loci)
#res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
pv = 1 - (prod(pr.approx) * Adj.func(P1, P2))^(n.eff/n.all)
#####################----------------------
#####################----------------------
#####################----------------------
#library(SAT)
# MinDetect.adj = function(P1, P2){
#   P.min = pmin(P1, P2)
#   P.max = pmax(P1, P2)
#   M = min(P.max)
#   target.loci = which(P.min <= M)
#   P.min.target =  P.min[target.loci]
#   pr.approx = (1-M)/(1-P.min.target)
#   Adj = Adj.func(P1, P2)
#   p.value = 1 - prod(pr.approx)* Adj
#   return(list(M = M, p = p.value))
# }
# Adj.func = function(P1, P2){
#   P.min = pmin(P1, P2)
#   P.max = pmax(P1, P2)
#   M = min(P.max)
#   target.loci = which(P.min <= M)
#   P.min.target =  P.min[target.loci]
#   #I.1 = which(mu != 0)
#   #I.0 = which(mu == 0)
#
#   pr.approx = (1-M)/(1-P.min.target)
#   #F_min = pp.to.z(mu = mu, px =M) + M - M*(pp.to.z(mu = mu, px =M))
#   F_min.est = rep(mean(P.min < M), length(P.min.target))
#   #A.1 = sum((1 - F_min) /F_min)
#   A.1 = sum((1 - F_min.est) /F_min.est)
#   A.2 = -log(1 - M) - (M - M^2/2)/(1 - M)^2
#   A.3 = sum(log(1 - P.min.target))
#
#   A = A.1*A.2 - A.3
#
#   return( exp(-A) )
#
# }
pvec = rbind(pvec, pv)
print(pv)
}
View(pvec)
hist(pvec[,1])
hist(pvec[,2])
hist(pvec[,3])
hist(pvec[,2])
hist(pvec[,1])
mean(pvec[,1] < 0.01)
mean(pvec[,1] < 0.05)
mean(pvec[,1] < 0.1)
mean(pvec[,1] < 0.2)
mean(pvec[,1] < 0.3)
snp_qq(pvec[,1])
pv = pvec[,1]
lattice::qqmath(~-log10(pv), distribution = function(x){-log10(qunif(1-x))} )
pv = pvec[,2]
lattice::qqmath(~-log10(pv), distribution = function(x){-log10(qunif(1-x))} )
pv = pvec[,3]
lattice::qqmath(~-log10(pv), distribution = function(x){-log10(qunif(1-x))} )
pvec2 <- readRDS("P:/SAT-paper/SimuCode/GenoSimu/pvec2.rds")
pvec = rbind(pvec, pvec2)
lattice::qqmath(~-log10(pvec[,1]), distribution = function(x){-log10(qunif(1-x))} )
lattice::qqmath(~-log10(pvec[,2]), distribution = function(x){-log10(qunif(1-x))} )
lattice::qqmath(~-log10(pvec[,3]), distribution = function(x){-log10(qunif(1-x))} )
hist(pvec[,1])
hist(pvec[,2])
hist(pvec[,3])
hist(pvec[,1])
sum(pvec[,1] < 0.01)
mean(pvec[,1] < 0.01)
mean(pvec[,1] < 0.02)
mean(pvec[,1] < 0.02)
mean(pvec[,1] < 0.03)
mean(pvec[,1] < 0.04)
mean(pvec[,1] < 0.05)
mean(pvec[,1] < 0.06)
#n.eff.1 =  SAT::meff(eigen = evs, method = "nyholt")
n.eff.2 = SAT::meff(eigen = evs, method = "liji")
n.eff.3 = SAT::meff(eigen = evs, method = "gao")
n.eff.4 = SAT::meff(eigen = evs, method = "galwey")
mean(pvec[,2] < 0.05)
mean(pvec[,3] < 0.05)
meff
sum(evs)
sum(evs^2)/sum(evs)
n.eff.2 = SAT::meff(eigen = evs, method = "liji")
n.eff.3 = SAT::meff(eigen = evs, method = "gao")
n.eff.4 = SAT::meff(eigen = evs, method = "galwey")
n.eff = c(n.eff.2, n.eff.3, n.eff.4)
n.all = length(target.loci)
#res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
pv = 1 - (prod(pr.approx) * Adj.func(P1, P2))^(n.eff/n.all)
pv
n.eff = 95
#res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
pv = 1 - (prod(pr.approx) * Adj.func(P1, P2))^(n.eff/n.all)
pv
#####################---------------------
#####################---------------------
#####################---------------------
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
pr.approx = (1-M)/(1-P.min.target)
sum(pr.approx)
Adj.func
#####################---------------------
#####################---------------------
#####################---------------------
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
pr.approx = (1-M)/(1-P.min.target)
F_min.est = mean(P.min < M)
F.min = mean(P.min < M)
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
F.min = mean(P.min < M)
exp( length(target.loci) * (log(1 - M)/F.min - (1 - F.min)/F.min * (M - M^2/2)/(1 - M)^2) )
M
log(1 - M)/F.min
(M - M^2/2)/(1 - M)^2
(1 - F.min)/F.min * (M - M^2/2)/(1 - M)^2
(log(1 - M)/F.min - (1 - F.min)/F.min * (M - M^2/2)/(1 - M)^2)
P.min = pmin(P1, P2)
P.max = pmax(P1, P2)
M = min(P.max)
target.loci = which(P.min <= M)
P.min.target =  P.min[target.loci]
F.min = mean(P.min < M)
exp( length(target.loci) * (log(1 - M)/F.min + (1 - F.min)/F.min * (M - M^2/2)/(1 - M)^2) )
F.min
log(1 - M)/F.min
(1 - F.min)/F.min * (M - 0.5*M^2)/(1 - M)^2
1 - (prod(pr.approx) * Adj.func(P1, P2))
(prod(pr.approx) * Adj.func(P1, P2))
View(corr)
res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
corr <- snp_cor(G, ind.col = target.loci)
res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
str(res)
library(bigsnpr)
res <- snp_ldsplit(corr, thr_r2 = 0.01, min_size = 1, max_size = 50, max_K = 50)
res <- snp_ldsplit(corr, thr_r2 = 0.01,
min_size = 1, max_size = 50, max_K = 10)
res
devtools::load_all('../../SAT/')
GenerateBlock
res <- snp_ldsplit(corr, thr_r2 = 0.01,
min_size = 5, max_size = 50, max_K = 10)
block <- snp_ldsplit(corr, thr_r2 = 0.01,min_size = 5, max_size = 50, max_K = 10)
str(corr)
block <- snp_ldsplit(corr, thr_r2 = 0.01,min_size = 5, max_size = 50, max_K = 50)
block <- snp_ldsplit(corr, thr_r2 = 0.01,min_size = 5, max_size = 50, max_K = 100)
View(block)
block <- snp_ldsplit(corr, thr_r2 = 0.01,min_size = 5, max_size = 100, max_K = 100)
View(block)
block <- snp_ldsplit(corr, thr_r2 = 0.01,
min_size = 1, max_size = 100, max_K = 100)
View(block)
block <- snp_ldsplit(corr, thr_r2 = 0.05,
min_size = 1, max_size = 100, max_K = 100)
View(block)
block <- snp_ldsplit(corr, thr_r2 = 0.05,
min_size = 1, max_size = 100, max_K = 200)
View(block)
target.loci %>% View
block <- snp_ldsplit(corr, thr_r2 = 0.05,
min_size = 1, max_size = 100, max_K = 300)
View(block)
block <- snp_ldsplit(corr, thr_r2 = 0.05,
min_size = 1, max_size = 200, max_K = 300)
View(block)
block <- snp_ldsplit(corr, thr_r2 = 0.05,
min_size = 1, max_size = 500, max_K = 300)
View(block)
corr <- snp_cor(G, ind.col = target.loci) %>% as.matrix()
View(corr)
target.loci = which(P.min <= M)
map = test$map
map[target.loci,] %>% View
diff(map$physical.pos[target.loci,])
diff(map$physical.pos[target.loci])
max(map$physical.pos[target.loci])
max(diff(map$physical.pos[target.loci]))
summary(diff(map$physical.pos[target.loci]))
View(diff(map$physical.pos[target.loci]))
plot(corr[row(corr) == (col(corr) - 1)])
abs(plot(corr[row(corr) == (col(corr) - 1)]))
(plot(abs(corr[row(corr) == (col(corr) - 1)])))
which( abs(corr[row(corr) == (col(corr) - 1)])) < 0.1)
which( abs(corr[row(corr) == (col(corr) - 1)]) < 0.1)
corr[4144, 4145]
H = corr[4130:4150, 4130:4150]
View(H)
map.sub = map[target.loci, ]
View(map.sub)
map.sub[4144,]
map.sub[4145,]
map.sub[4146,]
G[, c(450576, 450578)] %>% cor
G[, c(450577, 450578)] %>% cor
G[, c(450576, 450578, 450580)] %>% cor
View(H)
G[, c(350575, 450576, 450578, 450580)] %>% cor
G[, c(450575, 450576, 450578, 450580)] %>% cor
G[, c( 450576)] %>% var
G[, c( 450575)] %>% var
G[, c( 450577)] %>% var
G[, c( 450578)] %>% var
mean(G[, c( 450578)])
mean(G[, c( 450576)])
image(corr)
BiocManager::install("gpart")
library(gpart)
SNPinfo = map.sub[,c(1,2,4)]
res1 = BigLD(geno = G[,target.loci], SNPinfo = SNPinfo[1:1000,])
SNPinfo = map[target.loci,c(1,2,4)]
res1 = BigLD(geno = G[,target.loci], SNPinfo = SNPinfo[1:1000,])
geno = G[,target.loci]
res1 = BigLD(geno =geno, SNPinfo = SNPinfo[1:1000,])
res1 = BigLD(geno =geno, SNPinfo = SNPinfo)
View(res1)
cor1 = cor(G[,1:200])
library(SAT)
## basic example code
p <- 1*10^5; ## total number of pairs
d1 = 100; d2 = 100; d3 = 1;
X <- c(rep(0,p-(d1 + d2 + d3)),rep(1,d1),rep(2,d2),rep(3,d3));
mu.1 = rep(0, p); mu.2 = rep(0, p);
mu.1[X==1|X==3] = 4; mu.2[X==2|X==3] = 5;
Z1 <- mu.1 + rnorm(p,0,1);
Z2 <- mu.2 + rnorm(p,0,1);
T1 = abs(Z1);T2 = abs(Z2);
P1 = 2* (1 - pnorm( T1)); P2 = 2* (1 - pnorm(T2));
SAT::MinDetect(P1, P2)
library(SAT)
## basic example code
p <- 1*10^5; ## total number of pairs
d1 = 100; d2 = 100; d3 = 1;
X <- c(rep(0,p-(d1 + d2 + d3)),rep(1,d1),rep(2,d2),rep(3,d3));
mu.1 = rep(0, p); mu.2 = rep(0, p);
mu.1[X==1|X==3] = 4; mu.2[X==2|X==3] = 5;
Z1 <- mu.1 + rnorm(p,0,1);
Z2 <- mu.2 + rnorm(p,0,1);
T1 = abs(Z1);T2 = abs(Z2);
P1 = 2* (1 - pnorm( T1)); P2 = 2* (1 - pnorm(T2));
SAT::MinMaxP.simu(P1, P2)
library(SAT)
## basic example code
p <- 1*10^5; ## total number of pairs
d1 = 100; d2 = 100; d3 = 1;
X <- c(rep(0,p-(d1 + d2 + d3)),rep(1,d1),rep(2,d2),rep(3,d3));
mu.1 = rep(0, p); mu.2 = rep(0, p);
mu.1[X==1|X==3] = 4; mu.2[X==2|X==3] = 5;
Z1 <- mu.1 + rnorm(p,0,1);
Z2 <- mu.2 + rnorm(p,0,1);
T1 = abs(Z1);T2 = abs(Z2);
P1 = 2* (1 - pnorm( T1)); P2 = 2* (1 - pnorm(T2));
MinMaxP.simu(P1, P2)
library(SAT)
## basic example code
p <- 1*10^5; ## total number of pairs
d1 = 100; d2 = 100; d3 = 1;
X <- c(rep(0,p-(d1 + d2 + d3)),rep(1,d1),rep(2,d2),rep(3,d3));
mu.1 = rep(0, p); mu.2 = rep(0, p);
mu.1[X==1|X==3] = 4; mu.2[X==2|X==3] = 5;
Z1 <- mu.1 + rnorm(p,0,1);
Z2 <- mu.2 + rnorm(p,0,1);
T1 = abs(Z1);T2 = abs(Z2);
P1 = 2* (1 - pnorm( T1)); P2 = 2* (1 - pnorm(T2));
MinMaxP.simu(P1, P2)
git add .
library(SAT)
MinMaxP.discov
MinMaxP.discov()
devtools::document()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::document()
library(devtools)
install.packages("htmltools")
install.packages("htmltools")
library(SAT)
library(SAT)
library(SAT)
library(SAT)
data("SAT")
data(package = "SAT")
ld_block_hg19 <- readRDS("C:/Users/lukew/Dropbox/Git-rep/SAT/data/ld_block_hg19.rds")
usethis::use_data(ld_block_hg19)
load("C:/Users/lukew/Dropbox/Git-rep/SAT/data/ld_block_hg19.rda")
library(SAT)
library(SAT)
